/* Generated By:JavaCC: Do not edit this line. LessCSSParserTokenManager.java */
package org.lesscss.jcclexer;

/** Token Manager. */
public class LessCSSParserTokenManager implements LessCSSParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x10000L) != 0L)
            return 34;
         if ((active0 & 0x10000004L) != 0L)
            return 1;
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 60;
            return -1;
         }
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 57;
            return 120;
         }
         if ((active0 & 0x80040L) != 0L)
            return 31;
         if ((active0 & 0x100000L) != 0L)
            return 66;
         if ((active0 & 0x300L) != 0L)
         {
            jjmatchedKind = 57;
            return 109;
         }
         if ((active0 & 0x4000L) != 0L)
            return 28;
         if ((active0 & 0x200000L) != 0L)
            return 76;
         if ((active0 & 0x4000000L) != 0L)
            return 116;
         return -1;
      case 1:
         if ((active0 & 0x40000000L) != 0L)
            return 37;
         if ((active0 & 0x300L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 1;
            return 105;
         }
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 1;
            return 32;
         }
         return -1;
      case 2:
         if ((active0 & 0x100L) != 0L)
            return 106;
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 2;
            return 32;
         }
         if ((active0 & 0x200L) != 0L)
            return 111;
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 3:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 3;
            return 32;
         }
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 4:
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 4;
            return 32;
         }
         return -1;
      case 5:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 5;
            return 32;
         }
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x40L) != 0L)
            return 32;
         return -1;
      case 7:
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x80L);
      case 35:
         return jjStartNfaWithStates_0(0, 21, 76);
      case 40:
         return jjStopAtPos(0, 10);
      case 41:
         return jjStopAtPos(0, 11);
      case 42:
         return jjStopAtPos(0, 27);
      case 43:
         return jjStopAtPos(0, 25);
      case 44:
         return jjStopAtPos(0, 18);
      case 45:
         return jjStartNfaWithStates_0(0, 26, 116);
      case 46:
         return jjStartNfaWithStates_0(0, 20, 66);
      case 47:
         jjmatchedKind = 28;
         return jjMoveStringLiteralDfa1_0(0x4L);
      case 58:
         return jjStartNfaWithStates_0(0, 16, 34);
      case 59:
         return jjStopAtPos(0, 17);
      case 60:
         return jjStopAtPos(0, 23);
      case 61:
         return jjStopAtPos(0, 22);
      case 62:
         return jjStopAtPos(0, 24);
      case 64:
         jjmatchedKind = 19;
         return jjMoveStringLiteralDfa1_0(0x40L);
      case 91:
         return jjStartNfaWithStates_0(0, 14, 28);
      case 93:
         return jjStopAtPos(0, 15);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x40000000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x300L);
      case 123:
         return jjStopAtPos(0, 12);
      case 125:
         return jjStopAtPos(0, 13);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(1, 2);
         break;
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0xc0L);
      case 109:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(1, 30, 37);
         break;
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x300L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 105:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 9, 111);
         break;
      case 108:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 106);
         break;
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0xc0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0xc0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0xc0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0xc0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 116:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 6, 32);
         return jjMoveStringLiteralDfa7_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 116:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(9, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 120;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 111:
                  if ((0x3ff640000000000L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(37);
                  }
                  else if (curChar == 40)
                     jjCheckNAdd(112);
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     jjCheckNAdd(65);
                  }
                  else if (curChar == 45)
                  {
                     if (kind > 54)
                        kind = 54;
                     jjCheckNAdd(67);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 7);
                  break;
               case 105:
               case 37:
                  if ((0x3ff640000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(37);
                  break;
               case 116:
                  if ((0x3ff640000000000L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(37);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(72, 73);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(69, 70);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     jjCheckNAdd(62);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(8, 15);
                  else if (curChar == 48)
                     jjCheckNAddStates(16, 22);
                  break;
               case 106:
                  if ((0x3ff640000000000L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(37);
                  }
                  else if (curChar == 40)
                     jjCheckNAdd(107);
                  break;
               case 109:
                  if ((0x3ff640000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(37);
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  else if (curChar == 45)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAdd(86);
                  }
                  break;
               case 0:
                  if ((0xfc009bffffffffffL & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(23, 26);
                  else if (curChar == 45)
                     jjCheckNAddStates(27, 32);
                  else if (curChar == 46)
                     jjCheckNAddStates(33, 35);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     jjCheckNAddStates(36, 44);
                  }
                  else if ((0x100003600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if ((0x8400000000L & l) != 0L)
                  {
                     if (kind > 49)
                        kind = 49;
                  }
                  else if (curChar == 35)
                     jjAddStates(45, 46);
                  else if (curChar == 48)
                  {
                     if (kind > 43)
                        kind = 43;
                     jjCheckNAddStates(16, 22);
                  }
                  else if (curChar == 45)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(37);
                  }
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 34;
                  else if (curChar == 37)
                  {
                     if (kind > 31)
                        kind = 31;
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  if (curChar == 39)
                     jjCheckNAddStates(47, 52);
                  else if (curChar == 34)
                     jjCheckNAddStates(53, 55);
                  break;
               case 120:
                  if ((0x3ff640000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(37);
                  break;
               case 1:
                  if (curChar != 47)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddStates(56, 58);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddStates(56, 58);
                  break;
               case 3:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 4:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 5:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 7:
                  if (curChar == 37 && kind > 31)
                     kind = 31;
                  break;
               case 17:
                  if (curChar == 34)
                     jjCheckNAddStates(53, 55);
                  break;
               case 18:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(53, 55);
                  break;
               case 20:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(53, 55);
                  break;
               case 21:
                  if (curChar == 34 && kind > 47)
                     kind = 47;
                  break;
               case 22:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(59, 62);
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(53, 55);
                  break;
               case 24:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 26:
                  if ((0x8400000000L & l) != 0L && kind > 49)
                     kind = 49;
                  break;
               case 28:
                  jjAddStates(63, 64);
                  break;
               case 31:
                  if (curChar != 45)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAdd(32);
                  break;
               case 32:
                  if ((0x3ff640000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAdd(32);
                  break;
               case 33:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if (curChar != 45)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(35);
                  break;
               case 35:
                  if ((0x3ff640000000000L & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(35);
                  break;
               case 36:
                  if (curChar != 45)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(37);
                  break;
               case 38:
                  if ((0xfc009bffffffffffL & l) != 0L && kind > 60)
                     kind = 60;
                  break;
               case 44:
                  if (curChar != 48)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjCheckNAddStates(16, 22);
                  break;
               case 48:
                  if (curChar == 37 && kind > 29)
                     kind = 29;
                  break;
               case 60:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjCheckNAddStates(36, 44);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(8, 15);
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjCheckNAdd(62);
                  break;
               case 63:
                  if (curChar == 46)
                     jjCheckNAddStates(33, 35);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 7);
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjCheckNAdd(65);
                  break;
               case 67:
                  if ((0x3ff640000000000L & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjCheckNAdd(67);
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(23, 26);
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(69, 70);
                  break;
               case 70:
                  if (curChar == 46)
                     jjCheckNAddStates(65, 72);
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(65, 72);
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(72, 73);
                  break;
               case 73:
                  if (curChar != 46)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjCheckNAdd(74);
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjCheckNAdd(74);
                  break;
               case 75:
                  if (curChar == 35)
                     jjAddStates(45, 46);
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAddStates(73, 77);
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) != 0L && kind > 46)
                     kind = 46;
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(80);
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAddTwoStates(80, 81);
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAddStates(78, 80);
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAddStates(81, 84);
                  break;
               case 85:
                  if (curChar != 45)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(86);
                  break;
               case 86:
                  if ((0x3ff640000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(86);
                  break;
               case 87:
                  if (curChar == 39)
                     jjCheckNAddStates(47, 52);
                  break;
               case 88:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(85, 87);
                  break;
               case 90:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(85, 87);
                  break;
               case 91:
                  if (curChar == 39 && kind > 47)
                     kind = 47;
                  break;
               case 92:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(88, 91);
                  break;
               case 93:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(85, 87);
                  break;
               case 94:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 95:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(93);
                  break;
               case 96:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(92, 94);
                  break;
               case 98:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(92, 94);
                  break;
               case 99:
                  if (curChar == 39 && kind > 48)
                     kind = 48;
                  break;
               case 100:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(95, 98);
                  break;
               case 101:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(92, 94);
                  break;
               case 102:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 103:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(101);
                  break;
               case 107:
                  if ((0xfffffdffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(107, 108);
                  break;
               case 108:
                  if (curChar == 41 && kind > 50)
                     kind = 50;
                  break;
               case 112:
                  if ((0xfffffdffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(112, 113);
                  break;
               case 113:
                  if (curChar == 41 && kind > 51)
                     kind = 51;
                  break;
               case 115:
                  if (curChar == 45)
                     jjCheckNAddStates(27, 32);
                  break;
               case 117:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(8, 15);
                  break;
               case 118:
                  if (curChar == 48 && kind > 43)
                     kind = 43;
                  break;
               case 119:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjCheckNAdd(62);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 111:
               case 37:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(37);
                  break;
               case 66:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjCheckNAdd(67);
                  break;
               case 105:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(37);
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 111;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 116:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(37);
                  break;
               case 106:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(37);
                  break;
               case 109:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(37);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 110;
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 76:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAdd(86);
                  }
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(37);
                  }
                  else if ((0xf800000178000001L & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                  }
                  if (curChar == 117)
                     jjAddStates(99, 100);
                  else if (curChar == 109)
                     jjCheckNAddTwoStates(10, 43);
                  else if (curChar == 112)
                     jjCheckNAddStates(101, 103);
                  else if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 31;
                  else if (curChar == 91)
                     jjCheckNAdd(28);
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 15;
                  else if (curChar == 101)
                     jjCheckNAdd(12);
                  else if (curChar == 99)
                     jjCheckNAdd(10);
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if (curChar == 115)
                  {
                     if (kind > 31)
                        kind = 31;
                  }
                  break;
               case 120:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(37);
                  }
                  if (curChar == 120)
                  {
                     if (kind > 31)
                        kind = 31;
                  }
                  break;
               case 2:
                  if (kind > 5)
                     kind = 5;
                  jjAddStates(56, 58);
                  break;
               case 7:
               case 43:
                  if (curChar == 115 && kind > 31)
                     kind = 31;
                  break;
               case 8:
                  if (curChar == 110 && kind > 31)
                     kind = 31;
                  break;
               case 9:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 109 && kind > 31)
                     kind = 31;
                  break;
               case 11:
                  if (curChar == 99)
                     jjCheckNAdd(10);
                  break;
               case 12:
                  if (curChar == 120 && kind > 31)
                     kind = 31;
                  break;
               case 13:
                  if (curChar == 101)
                     jjCheckNAdd(12);
                  break;
               case 14:
                  if (curChar == 103 && kind > 31)
                     kind = 31;
                  break;
               case 15:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 18:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(53, 55);
                  break;
               case 19:
                  if (curChar == 92)
                     jjAddStates(104, 106);
                  break;
               case 20:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(53, 55);
                  break;
               case 27:
                  if (curChar == 91)
                     jjCheckNAdd(28);
                  break;
               case 28:
                  if ((0xffffffffdfffffffL & l) != 0L)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 29:
                  if (curChar == 93 && kind > 52)
                     kind = 52;
                  break;
               case 30:
                  if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAdd(32);
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAdd(32);
                  break;
               case 34:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(35);
                  break;
               case 35:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(35);
                  break;
               case 36:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(37);
                  break;
               case 38:
                  if ((0xf800000178000001L & l) != 0L && kind > 60)
                     kind = 60;
                  break;
               case 39:
                  if (curChar == 112)
                     jjCheckNAddStates(101, 103);
                  break;
               case 40:
                  if (curChar == 116 && kind > 31)
                     kind = 31;
                  break;
               case 41:
                  if (curChar == 99 && kind > 31)
                     kind = 31;
                  break;
               case 42:
                  if (curChar == 109)
                     jjCheckNAddTwoStates(10, 43);
                  break;
               case 45:
                  if (curChar == 103 && kind > 29)
                     kind = 29;
                  break;
               case 46:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
               case 56:
                  if (curChar == 115 && kind > 29)
                     kind = 29;
                  break;
               case 49:
                  if (curChar == 109 && kind > 29)
                     kind = 29;
                  break;
               case 50:
                  if (curChar == 99)
                     jjCheckNAdd(49);
                  break;
               case 51:
                  if (curChar == 110 && kind > 29)
                     kind = 29;
                  break;
               case 52:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 101)
                     jjCheckNAddTwoStates(49, 54);
                  break;
               case 54:
                  if (curChar == 120 && kind > 29)
                     kind = 29;
                  break;
               case 55:
                  if (curChar == 109)
                     jjCheckNAddTwoStates(56, 49);
                  break;
               case 57:
                  if (curChar == 112)
                     jjCheckNAddStates(107, 109);
                  break;
               case 58:
                  if (curChar == 99 && kind > 29)
                     kind = 29;
                  break;
               case 59:
                  if (curChar == 116 && kind > 29)
                     kind = 29;
                  break;
               case 67:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjCheckNAdd(67);
                  break;
               case 77:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 78:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 79:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAddStates(73, 77);
                  break;
               case 80:
                  if ((0x7e0000007eL & l) != 0L && kind > 46)
                     kind = 46;
                  break;
               case 81:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(80);
                  break;
               case 82:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAddTwoStates(80, 81);
                  break;
               case 83:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAddStates(78, 80);
                  break;
               case 84:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAddStates(81, 84);
                  break;
               case 85:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(86);
                  break;
               case 86:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(86);
                  break;
               case 88:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(85, 87);
                  break;
               case 89:
                  if (curChar == 92)
                     jjAddStates(110, 112);
                  break;
               case 90:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(85, 87);
                  break;
               case 96:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(92, 94);
                  break;
               case 97:
                  if (curChar == 92)
                     jjAddStates(113, 115);
                  break;
               case 98:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(92, 94);
                  break;
               case 104:
                  if (curChar == 117)
                     jjAddStates(99, 100);
                  break;
               case 107:
                  jjAddStates(116, 117);
                  break;
               case 110:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 112:
                  jjAddStates(118, 119);
                  break;
               case 114:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 60)
                     kind = 60;
                  break;
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjAddStates(56, 58);
                  break;
               case 18:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(53, 55);
                  break;
               case 28:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(63, 64);
                  break;
               case 88:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(85, 87);
                  break;
               case 96:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(92, 94);
                  break;
               case 107:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(116, 117);
                  break;
               case 112:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(118, 119);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 120 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x8L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(1, 3);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   64, 47, 48, 50, 52, 53, 55, 57, 61, 47, 48, 50, 52, 53, 55, 57, 
   47, 48, 50, 52, 53, 55, 57, 69, 70, 72, 73, 116, 117, 69, 118, 119, 
   72, 64, 65, 66, 61, 47, 48, 50, 52, 62, 53, 55, 57, 76, 85, 88, 
   89, 91, 96, 97, 99, 18, 19, 21, 2, 3, 5, 18, 19, 23, 21, 28, 
   29, 71, 47, 48, 50, 52, 53, 55, 57, 80, 81, 82, 83, 84, 80, 81, 
   82, 80, 81, 82, 83, 88, 89, 91, 88, 89, 93, 91, 96, 97, 99, 96, 
   97, 101, 99, 109, 114, 12, 40, 41, 20, 22, 24, 58, 59, 54, 90, 92, 
   94, 98, 100, 102, 107, 108, 112, 113, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\100\151\155\160\157\162\164", 
"\41\151\155\160\157\162\164\141\156\164", "\165\162\154", "\165\162\151", "\50", "\51", "\173", "\175", "\133", "\135", 
"\72", "\73", "\54", "\100", "\56", "\43", "\75", "\74", "\76", "\53", "\55", "\52", 
"\57", null, "\145\155", null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_MULTI_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x13ffc800ffffffebL, 
};
static final long[] jjtoMore = {
   0x14L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[120];
private final int[] jjstateSet = new int[240];
protected char curChar;
/** Constructor. */
public LessCSSParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public LessCSSParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 120; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 4)
         {
            jjmatchedKind = 4;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
